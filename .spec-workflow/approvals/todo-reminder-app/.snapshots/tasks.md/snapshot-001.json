{
  "id": "snapshot_1759577937888_fyc8xfgwi",
  "approvalId": "approval_1759577937855_687p78aue",
  "approvalTitle": "Approve tasks for todo-reminder-app",
  "version": 1,
  "timestamp": "2025-10-04T11:38:57.888Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Spec: todo-reminder-app - Tasks\r\n\r\nStatus: - [ ] Pending review\r\n\r\nTasks\r\n\r\n- [ ] Task 1: Project scaffold\r\n  - Files: Flutter app base (pubspec.yaml, lib/main.dart)\r\n  - _Prompt:\r\n    Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n    Role: Flutter developer\r\n    Task: Create a new Flutter project scaffold with null-safety enabled, add recommended packages (flutter_local_notifications, timezone, hive, riverpod). Create `lib/main.dart` with app entry and basic routing.\r\n    Restrictions: Don't add platform-specific native code beyond plugin setup. Keep UI minimal.\r\n    _Leverage: design.md, requirements.md\r\n    _Requirements: Basic app skeleton, cross-platform support\r\n    Success: `flutter run` starts the app and shows a blank Home screen with app title.\r\n\r\n- [ ] Task 2: Data layer and models\r\n  - Files: lib/models/task.dart, lib/data/task_repository.dart\r\n  - _Prompt:\r\n    Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n    Role: Flutter developer\r\n    Task: Implement Task model and a repository using Hive (or sqflite if preferred). Include create/read/update/delete APIs and a method to list tasks by filter (today/upcoming/completed).\r\n    Restrictions: Keep interfaces async and testable. Do not implement UI.\r\n    _Leverage: design.md\r\n    _Requirements: Persistence, filters, offline\r\n    Success: Unit tests for repository CRUD pass.\r\n\r\n- [ ] Task 3: Notifications & scheduling\r\n  - Files: lib/services/notification_service.dart\r\n  - _Prompt:\r\n    Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n    Role: Mobile platform engineer\r\n    Task: Integrate flutter_local_notifications and timezone, implement scheduling and cancellation by reminderId. Ensure scheduled notifications survive device reboot on Android.\r\n    Restrictions: Use plugin APIs only; do not implement cloud messaging.\r\n    _Leverage: design.md\r\n    _Requirements: Reliable local notifications, timezone-aware scheduling\r\n    Success: Unit/integration tests (or manual test instructions) demonstrate scheduling and cancellation.\r\n\r\n- [ ] Task 4: Task list UI and details\r\n  - Files: lib/screens/home.dart, lib/screens/task_detail.dart\r\n  - _Prompt:\r\n    Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n    Role: Flutter UI developer\r\n    Task: Build the Home screen listing tasks with filters (Today, Upcoming, Completed) and a Task Detail screen for viewing/editing a task.\r\n    Restrictions: Use recommended state management (riverpod). Keep designs accessible.\r\n    _Leverage: design.md, models\r\n    _Requirements: Create/Edit/Delete, filters\r\n    Success: Manual smoke test - create a task and view it in list and detail screens.\r\n\r\n- [ ] Task 5: Create task form & recurrence/snooze\r\n  - Files: lib/widgets/task_form.dart, lib/services/recurrence.dart\r\n  - _Prompt:\r\n    Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n    Role: Flutter developer\r\n    Task: Implement create/edit form supporting title, notes, due date/time, recurrence (none/daily/weekly/monthly) and snooze actions on notifications.\r\n    Restrictions: Keep recurrence simple; advanced RRULE deferred.\r\n    _Leverage: design.md\r\n    _Requirements: UX for scheduling + snooze\r\n    Success: Manual test - schedule task, receive notification, use snooze to reschedule.\r\n\r\n- [ ] Task 6: Background handling & reboot\r\n  - Files: android/ (native manifest changes), lib/services/boot_rescheduler.dart\r\n  - _Prompt:\r\n    Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n    Role: Mobile platform engineer\r\n    Task: Ensure scheduled notifications are rescheduled after device reboot (Android BootReceiver or plugin-based approach). Document necessary manifest changes.\r\n    Restrictions: Keep iOS behavior documented; avoid unsupported hacks.\r\n    _Leverage: design.md, notification_service\r\n    _Requirements: Notifications persist across reboot\r\n    Success: Manual device test after reboot shows scheduled notifications restored.\r\n\r\n- [ ] Task 7: Export/Import JSON & Settings\r\n  - Files: lib/services/export_service.dart, lib/screens/settings.dart\r\n  - _Prompt:\r\n    Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n    Role: Flutter developer\r\n    Task: Implement export/import of tasks to JSON and settings screen for snooze duration default and notification preferences.\r\n    Restrictions: Exports stored locally or shared via share sheet; no cloud storage.\r\n    _Leverage: design.md\r\n    _Requirements: Data portability, basic settings\r\n    Success: Export file created; import restores tasks.\r\n\r\n  - Files: test/*, .github/workflows/flutter.yml\r\n  - _Prompt:\r\n    Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n    Role: QA/DevOps\r\n    Task: Add unit tests for models and repository; add a basic CI workflow that runs `flutter test` on push.\r\n\r\n- [ ] Task 9: Voice input â€” STT integration\r\n  - Files: lib/services/voice_service.dart, pubspec.yaml (dependencies)\r\n  - _Prompt:\r\n    Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n    Role: Mobile developer\r\n    Task: Integrate on-device speech-to-text support using a suitable Flutter plugin (e.g., speech_to_text) and expose a simple API to start/stop listening and return transcribed text. Provide platform fallbacks and permission handling.\r\n    Restrictions: Do not send audio to third-party servers by default. Ensure microphone permission flows are implemented per-platform.\r\n    _Leverage: design.md\r\n    _Requirements: Voice input capability, on-device-first\r\n    Success: Manual test where microphone button records speech and returns a transcription.\r\n\r\n- [ ] Task 10: Voice parsing & command extraction\r\n  - Files: lib/services/voice_parser.dart, test/voice_parser_test.dart\r\n  - _Prompt:\r\n    Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n    Role: Developer\r\n    Task: Implement a deterministic parser that extracts title, due date/time, and simple recurrence from free-form transcribed text. Support phrases like \"tomorrow\", \"next Monday\", \"at 9am\", \"every day\". Add unit tests covering common phrases and edge cases.\r\n    Restrictions: No heavy ML models; keep the parser rule-based and testable.\r\n    _Leverage: design.md\r\n    _Requirements: Parsed preview for voice-created tasks\r\n    Success: Unit tests demonstrating correct extraction for sample sentences.\r\n\r\n- [ ] Task 11: Voice UI & preview flow\r\n  - Files: lib/widgets/voice_button.dart, lib/screens/voice_preview.dart\r\n  - _Prompt:\r\n    Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n    Role: Flutter UI developer\r\n    Task: Add a microphone button to Home and Create Task screens. After transcription and parsing, show a preview screen populated with parsed fields for user confirmation/edit before saving.\r\n    Restrictions: Keep UI accessible and consistent with app theming.\r\n    _Leverage: design.md, voice_service, voice_parser\r\n    _Requirements: Hands-free quick-add workflow with confirmation\r\n    Success: Manual test - speak a command, see populated preview, and confirm to save.\r\n\r\n- [ ] Task 12: Settings & privacy controls for voice\r\n  - Files: lib/screens/settings.dart (update), lib/services/privacy_prefs.dart\r\n  - _Prompt:\r\n    Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n    Role: Flutter developer\r\n    Task: Add Settings toggles to control voice processing: 'On-device speech recognition' (preferred), and a consent toggle 'Allow cloud-based speech processing' with explanation. Store preferences locally and respect them in `voice_service`.\r\n    Restrictions: Do not enable cloud processing by default.\r\n    _Leverage: design.md\r\n    _Requirements: User-visible privacy controls\r\n    Success: Manual test toggling settings changes behavior of voice processing.\r\n    Restrictions: Keep CI minimal; don't require devices.\r\n    _Leverage: repository code\r\n    _Requirements: Automated tests, basic CI\r\n    Success: CI pipeline passes tests.\r\n\r\n  - [ ] Task 13: Repeat controller for readout\r\n    - Files: lib/services/repeat_controller.dart, test/repeat_controller_test.dart\r\n    - _Prompt:\r\n      Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n      Role: Flutter developer\r\n      Task: Implement a repeat controller that manages repeated TTS readouts for a task. It should support start, stop, pause, resume, configurable interval (default 20s), and a cap (max duration or max repeats). Persist minimal state so that short-term process restarts can potentially restore active repeats.\r\n      Restrictions: Keep logic platform-agnostic; platform-specific execution (foreground service) handled in separate task.\r\n      _Leverage: design.md\r\n      _Requirements: Repeat every 20s until stopped, configurable cap\r\n      Success: Unit tests verify start/stop/interval/cap behavior.\r\n\r\n  - [ ] Task 14: Android foreground service for reliable readout\r\n    - Files: android/src/main/... (native service), lib/services/android_foreground_bridge.dart\r\n    - _Prompt:\r\n      Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n      Role: Android engineer\r\n      Task: Implement a minimal Android foreground service (or integrate a package that provides it) to run TTS readouts reliably while the app is backgrounded or device is idle. Expose start/stop APIs to Dart via platform channels or a supporting plugin. Provide persistent notification with Stop/Mark Done actions while running.\r\n      Restrictions: Keep native code minimal and documented; ensure proper permission and foreground notification handling per Android versions.\r\n      _Leverage: design.md, notification_service\r\n      _Requirements: Reliable repeating TTS on Android background\r\n      Success: Manual test on Android demonstrates repeated readout while app is backgrounded and Stop action works.\r\n\r\n  - [ ] Task 15: iOS fallback approach for readout when backgrounded\r\n    - Files: lib/services/ios_readout_fallback.dart, README.md (platform limitations doc)\r\n    - _Prompt:\r\n      Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n      Role: iOS engineer\r\n      Task: Implement the documented fallback for iOS: when the app is backgrounded/terminated, schedule repeated local notifications up to the configured cap; when the app is foregrounded, resume TTS readout via repeat controller. Document any Background Modes implications and user-visible limitations in README.md.\r\n      Restrictions: Avoid using background audio mode unless team explicitly opts in after reviewing App Store implications.\r\n      _Leverage: design.md\r\n      _Requirements: iOS-compatible fallback for repeated readout\r\n      Success: Manual test on iOS demonstrates fallback behavior and documentation covers limitations.\r\n\r\n  - [ ] Task 16: Repeat readout settings & DND handling\r\n    - Files: lib/screens/settings.dart (update), lib/services/dnd_manager.dart\r\n    - _Prompt:\r\n      Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n      Role: Flutter developer\r\n      Task: Add Settings for repeat cap (e.g., default 5 minutes), allow user to opt-in to allow audible readout during DND, and implement a DND manager that queries system DND status where possible and enforces respect/default behavior.\r\n      Restrictions: Do not override system DND without explicit consent.\r\n      _Leverage: design.md\r\n      _Requirements: Configurable cap, DND respect with opt-in\r\n      Success: Manual test toggling settings changes how repeated readouts behave with system DND.\r\n\r\n  - [ ] Task 17: Tests for repeated readout integration\r\n    - Files: test/integration/repeat_integration_test.dart, test/manual_instructions.md\r\n    - _Prompt:\r\n      Implement the task for spec todo-reminder-app, first run spec-workflow-guide to get the workflow guide then implement the task:\r\n      Role: QA\r\n      Task: Add integration tests for the repeat controller and provide manual device test instructions for Android foreground service and iOS fallback (since CI cannot run device-level background tests reliably).\r\n      Restrictions: Keep CI-friendly tests for unit/integration; include manual steps for device verification.\r\n      _Leverage: repeat_controller, android_foreground_bridge, ios_readout_fallback\r\n      _Requirements: Repeat behavior verified and documented\r\n      Success: Unit/integration tests pass in CI; manual instructions validate device behaviors.\r\n\r\nNotes\r\n- After creating these tasks, request approval for requirements.md and then proceed through design and tasks approvals per workflow.\r\n\r\nDeliverables for Tasks phase\r\n- `.spec-workflow/specs/todo-reminder-app/tasks.md` (this file)\r\n",
  "fileStats": {
    "size": 13653,
    "lines": 198,
    "lastModified": "2025-10-04T11:36:48.166Z"
  },
  "comments": []
}